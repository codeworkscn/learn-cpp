// **********************************************************************
//
// Generated by the ORBacus IDL-to-C++ Translator
//
// Copyright (c) 2005
// IONA Technologies, Inc.
// Waltham, MA, USA
//
// All Rights Reserved
//
// **********************************************************************

// Version: 4.3.2

#ifndef ___Hello_tie_h__
#define ___Hello_tie_h__

#include <Hello_skel.h>

#ifndef OB_INTEGER_VERSION
#   error No ORBacus version defined! Is <OB/CORBA.h> included?
#endif

#ifndef OB_NO_VERSION_CHECK
#   if (OB_INTEGER_VERSION != 4030200L)
#       error ORBacus version mismatch!
#   endif
#endif

//
// IDL:Hello:1.0
//
template<class T>
class POA_Hello_tie : virtual public POA_Hello
{
    T* ptr_;
    PortableServer::POA_ptr poa_;
    ::CORBA::Boolean rel_;

    POA_Hello_tie(const POA_Hello_tie<T>&) { }
    void operator=(const POA_Hello_tie<T>&) { }

public:

    POA_Hello_tie(T& t)
        : ptr_(&t), poa_(PortableServer::POA::_nil()), rel_(false)
    {
    }

    POA_Hello_tie(T& t, PortableServer::POA_ptr poa)
        : ptr_(&t), poa_(PortableServer::POA::_duplicate(poa)), rel_(false)
    {
    }

    POA_Hello_tie(T* p, ::CORBA::Boolean release = true)
        : ptr_(p), poa_(PortableServer::POA::_nil()), rel_(release)
    {
    }

    POA_Hello_tie(T* p, PortableServer::POA_ptr poa, ::CORBA::Boolean release = true)
        : ptr_(p), poa_(PortableServer::POA::_duplicate(poa)), rel_(release)
    {
    }

    virtual
    ~POA_Hello_tie()
    {
        if(rel_)
            delete ptr_;

        ::CORBA::release(poa_);
    }

    T*
    _tied_object()
    {
        return ptr_;
    }

    void
    _tied_object(T& obj)
    {
        if(rel_)
            delete ptr_;

        ptr_ = &obj;
        rel_ = false;
    }

    void
    _tied_object(T* obj, ::CORBA::Boolean release = true)
    {
        if(rel_)
            delete ptr_;

        ptr_ = obj;
        rel_ = release;
    }

    ::CORBA::Boolean
    _is_owner()
    {
        return rel_;
    }

    void
    _is_owner(::CORBA::Boolean b)
    {
        rel_ = b;
    }

    virtual void
    say_hello()
        throw(::CORBA::SystemException)
    {
        ptr_ -> say_hello();
    }

    virtual void
    shutdown()
        throw(::CORBA::SystemException)
    {
        ptr_ -> shutdown();
    }

    PortableServer::POA_ptr _default_POA()
    {
        if(!::CORBA::is_nil(poa_))
            return PortableServer::POA::_duplicate(poa_);
        else
            return POA_Hello::_default_POA();
    }
};

#endif
