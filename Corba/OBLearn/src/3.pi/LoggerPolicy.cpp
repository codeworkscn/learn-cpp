// **********************************************************************
//
// Generated by the ORBacus IDL-to-C++ Translator
//
// Copyright (c) 2005
// IONA Technologies, Inc.
// Waltham, MA, USA
//
// All Rights Reserved
//
// **********************************************************************

// Version: 4.3.2

#include <OB/CORBAClient.h>
#include <LoggerPolicy.h>

#ifndef OB_INTEGER_VERSION
#   error No ORBacus version defined! Is <OB/CORBA.h> included?
#endif

#ifndef OB_NO_VERSION_CHECK
#   if (OB_INTEGER_VERSION != 4030200L)
#       error ORBacus version mismatch!
#   endif
#endif

::OB::TypeCodeConst _tc_LoggerPolicy(
"0100000021000000310000000100ffff1500000049444c3a4c6f67676572506f6c6963793a312"
"e30002ff1770d0000004c6f67676572506f6c69637900"
);

//
// IDL:LoggerPolicy:1.0
//
void
OBDuplicate(LoggerPolicy_ptr p)
{
    if(p)
        p -> _add_ref();
}

void
OBRelease(LoggerPolicy_ptr p)
{
    if(p)
        p -> _remove_ref();
}

LoggerPolicy_ptr
LoggerPolicy::_narrow(::CORBA::Object_ptr p)
{
    if(!::CORBA::is_nil(p))
    {
        LoggerPolicy_ptr v = 
            dynamic_cast< LoggerPolicy_ptr >(p);
        if(v)
            return _duplicate(v);
    }

    return _nil();
}

LoggerPolicy_ptr
LoggerPolicy::_narrow(::CORBA::AbstractBase_ptr p)
{
    if(!::CORBA::is_nil(p))
    {
        LoggerPolicy_ptr v =
            dynamic_cast< LoggerPolicy_ptr >(p);
        if(v)
            return _duplicate(v);

        ::CORBA::Object_var obj = p -> _to_object();
        return _narrow(obj);
    }
    return _nil();
}

void
OBMarshal(LoggerPolicy_ptr, OB::OutputStreamImpl*)
{
    throw ::CORBA::MARSHAL();
}

void
OBUnmarshal(LoggerPolicy_ptr&, OB::InputStreamImpl*)
{
    throw ::CORBA::MARSHAL();
}

void
operator<<=(::CORBA::Any& any, LoggerPolicy_ptr* v)
{
    any.replace(_tc_LoggerPolicy, (::CORBA::Object_ptr)*v, true);
}

void
operator<<=(::CORBA::Any& any, LoggerPolicy_ptr v)
{
    LoggerPolicy_ptr val = LoggerPolicy::_duplicate(v);
    any <<= &val;
}

::CORBA::Boolean
operator>>=(const ::CORBA::Any& any, LoggerPolicy_ptr& v)
{
    if(any.check_type(_tc_LoggerPolicy))
    {
        ::CORBA::Object_ptr val = (::CORBA::Object_ptr)any.value();

        if(!::CORBA::is_nil(val))
        {
            v = dynamic_cast< LoggerPolicy_ptr >(val);
        }
        else
            v = LoggerPolicy::_nil();

        return true;
    }
    else
        return false;
}
