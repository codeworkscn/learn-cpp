// **********************************************************************
//
// Generated by the ORBacus IDL-to-C++ Translator
//
// Copyright (c) 2005
// IONA Technologies, Inc.
// Waltham, MA, USA
//
// All Rights Reserved
//
// **********************************************************************

// Version: 4.3.2

#include <OB/CORBAClient.h>
#include <CallStack.h>

#ifndef OB_INTEGER_VERSION
#   error No ORBacus version defined! Is <OB/CORBA.h> included?
#endif

#ifndef OB_NO_VERSION_CHECK
#   if (OB_INTEGER_VERSION != 4030200L)
#       error ORBacus version mismatch!
#   endif
#endif

::OB::TypeCodeConst _tc_CallStack(
"01000000150000004400000001e94c001200000049444c3a43616c6c537461636b3a312e30001"
"2000a00000043616c6c537461636b009429130000001000000001100008120000000000000000"
"000000"
);

//
// IDL:CallStack:1.0
//
void
OBInfo_CallStack::marshal(const void* _ob_v, OB::OutputStreamImpl* _ob_out) const
{
    const ::CallStack& _ob_seq = *(const ::CallStack*)_ob_v;
    ::CORBA::ULong _ob_len0 = _ob_seq.length();
    _ob_out -> write_ulong(_ob_len0);
    const char* const *_ob_buf0 = _ob_seq.get_buffer();
    for(::CORBA::ULong _ob_i0 = 0 ; _ob_i0 < _ob_len0 ; _ob_i0++)
    {
        _ob_out -> write_string(_ob_buf0[_ob_i0]);
    }
}

void
OBInfo_CallStack::unmarshal(void* _ob_v, OB::InputStreamImpl* _ob_in) const
{
    ::CallStack& _ob_seq = *(::CallStack*)_ob_v;
    ::CORBA::ULong _ob_len0 = _ob_in -> read_ulong();
    _ob_seq.length(_ob_len0);
    char* * _ob_buf0 = _ob_seq.get_buffer();
    for(::CORBA::ULong _ob_i0 = 0 ; _ob_i0 < _ob_len0 ; _ob_i0++)
    {
        ::CORBA::string_free(_ob_buf0[_ob_i0]);
        _ob_buf0[_ob_i0] = 0;
        _ob_buf0[_ob_i0] = _ob_in -> read_string();
    }
}

void
operator<<=(::CORBA::Any& any, CallStack* v)
{
    static const OBInfo_CallStack info;
    any.replace(_tc_CallStack, v, true, &info);
}

void
operator<<=(::CORBA::Any& any, const CallStack& v)
{
    any <<= new CallStack(v);
}

::CORBA::Boolean
operator>>=(const ::CORBA::Any& any, const CallStack*& v)
{
    if(any.check_type(_tc_CallStack))
    {
        if(!any.info())
        {
            OB::InputStream_var _ob_in = any.create_input_stream();
            CallStack* val = new CallStack;
            ::CORBA::ULong _ob_len0 = _ob_in -> read_ulong();
            (*val).length(_ob_len0);
            char* * _ob_buf0 = (*val).get_buffer();
            for(::CORBA::ULong _ob_i0 = 0 ; _ob_i0 < _ob_len0 ; _ob_i0++)
            {
                ::CORBA::string_free(_ob_buf0[_ob_i0]);
                _ob_buf0[_ob_i0] = 0;
                _ob_buf0[_ob_i0] = _ob_in -> read_string();
            }
            (::CORBA::Any&)any <<= val;
        }

        v = (CallStack*)any.value();
        return true;
    }
    else
        return false;
}
