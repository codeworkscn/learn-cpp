// **********************************************************************
//
// Generated by the ORBacus IDL-to-C++ Translator
//
// Copyright (c) 2005
// IONA Technologies, Inc.
// Waltham, MA, USA
//
// All Rights Reserved
//
// **********************************************************************

// Version: 4.3.2

#ifndef ___PIDemo_h__
#define ___PIDemo_h__


#ifndef OB_INTEGER_VERSION
#   error No ORBacus version defined! Is <OB/CORBA.h> included?
#endif

#ifndef OB_NO_VERSION_CHECK
#   if (OB_INTEGER_VERSION != 4030200L)
#       error ORBacus version mismatch!
#   endif
#endif

class PIDemo;
typedef PIDemo* PIDemo_ptr;
typedef PIDemo* PIDemoRef;

extern OB::TypeCodeConst _tc_PIDemo;

::CORBA::Object_ptr OBUpcast(PIDemo_ptr);

void OBDuplicate(PIDemo_ptr);
void OBRelease(PIDemo_ptr);

void OBMarshal(PIDemo_ptr, OB::OutputStreamImpl*);
void OBUnmarshal(PIDemo_ptr&, OB::InputStreamImpl*);

typedef OB::ObjVar< PIDemo > PIDemo_var;
typedef OB::ObjOut< PIDemo > PIDemo_out;

class OBStubImpl_PIDemo;
typedef OBStubImpl_PIDemo* OBStubImpl_PIDemo_ptr;

void OBDuplicate(OBStubImpl_PIDemo_ptr);
void OBRelease(OBStubImpl_PIDemo_ptr);

typedef OB::ObjVar< OBStubImpl_PIDemo > OBStubImpl_PIDemo_var;

//
// IDL:PIDemo:1.0
//
class PIDemo : virtual public ::CORBA::Object
{
    PIDemo(const PIDemo&);
    void operator=(const PIDemo&);

protected:

    static const char* ids_[];

public:

    PIDemo() { }
    virtual ~PIDemo() { }

    typedef PIDemo_ptr _ptr_type;
    typedef PIDemo_var _var_type;

    static inline PIDemo_ptr
    _duplicate(PIDemo_ptr p)
    {
        if(p)
            p -> _add_ref();
        return p;
    }

    static inline PIDemo_ptr
    _nil()
    {
        return 0;
    }

    static PIDemo_ptr _narrow(::CORBA::Object_ptr);
    static PIDemo_ptr _unchecked_narrow(::CORBA::Object_ptr);

    static PIDemo_ptr _narrow(::CORBA::AbstractBase_ptr);
    static PIDemo_ptr _unchecked_narrow(::CORBA::AbstractBase_ptr);

    static const char** _OB_staticIds();

    //
    // IDL:PIDemo/User:1.0
    //
    struct User : public ::CORBA::UserException
    {
        User() { }
        User(const User&);
        User& operator=(const User&);

        static User* _downcast(::CORBA::Exception*);
        static const User* _downcast(const ::CORBA::Exception*);
        virtual const char* _name() const;
        virtual void _raise() const { throw *this; }
        virtual const char* _rep_id() const;
        virtual char* _to_string() const;

        virtual ::CORBA::Exception* _OB_clone() const;
        virtual void _OB_insertInAny(::CORBA::Any&);

        static void _OB_unmarshal(User&, OB::InputStreamImpl*);
    };

    static OB::TypeCodeConst _tc_User;

    //
    // IDL:PIDemo/noargs:1.0
    //
    virtual void noargs() = 0;

    //
    // IDL:PIDemo/noargs_oneway:1.0
    //
    virtual void noargs_oneway() = 0;

    //
    // IDL:PIDemo/noargs_return:1.0
    //
    virtual char* noargs_return() = 0;

    //
    // IDL:PIDemo/withargs:1.0
    //
    virtual void withargs(const char* param1,
                          char*& param2,
                          ::CORBA::String_out param3) = 0;

    //
    // IDL:PIDemo/systemexception:1.0
    //
    virtual void systemexception() = 0;

    //
    // IDL:PIDemo/userexception:1.0
    //
    virtual void userexception() = 0;

    //
    // IDL:PIDemo/switch_to_static_impl:1.0
    //
    virtual void switch_to_static_impl() = 0;

    //
    // IDL:PIDemo/switch_to_dynamic_impl:1.0
    //
    virtual void switch_to_dynamic_impl() = 0;

    //
    // IDL:PIDemo/call_other_impl:1.0
    //
    virtual void call_other_impl(::CORBA::Short level) = 0;

    //
    // IDL:PIDemo/deactivate:1.0
    //
    virtual void deactivate() = 0;
};

//
// IDL:PIDemo:1.0
//
class OBProxy_PIDemo : virtual public ::PIDemo,
                       virtual public OBCORBA::Object
{
    OBProxy_PIDemo(const OBProxy_PIDemo&);
    void operator=(const OBProxy_PIDemo&);

protected:

    virtual OB::MarshalStubImpl_ptr _OB_createMarshalStubImpl();

public:

    OBProxy_PIDemo() { }
    virtual ~OBProxy_PIDemo() { }

    virtual const char** _OB_ids() const;

    //
    // IDL:PIDemo/noargs:1.0
    //
    void noargs();

    //
    // IDL:PIDemo/noargs_oneway:1.0
    //
    void noargs_oneway();

    //
    // IDL:PIDemo/noargs_return:1.0
    //
    char* noargs_return();

    //
    // IDL:PIDemo/withargs:1.0
    //
    void withargs(const char* param1,
                  char*& param2,
                  ::CORBA::String_out param3);

    //
    // IDL:PIDemo/systemexception:1.0
    //
    void systemexception();

    //
    // IDL:PIDemo/userexception:1.0
    //
    void userexception();

    //
    // IDL:PIDemo/switch_to_static_impl:1.0
    //
    void switch_to_static_impl();

    //
    // IDL:PIDemo/switch_to_dynamic_impl:1.0
    //
    void switch_to_dynamic_impl();

    //
    // IDL:PIDemo/call_other_impl:1.0
    //
    void call_other_impl(::CORBA::Short level);

    //
    // IDL:PIDemo/deactivate:1.0
    //
    void deactivate();
};

//
// IDL:PIDemo:1.0
//
class OBStubImpl_PIDemo : virtual public OB::StubImplBase
{
    OBStubImpl_PIDemo(const OBStubImpl_PIDemo&);
    void operator=(const OBStubImpl_PIDemo&);

protected:

    OBStubImpl_PIDemo() { }

public:

    static inline OBStubImpl_PIDemo_ptr
    _duplicate(OBStubImpl_PIDemo_ptr p)
    {
        if(p)
            p -> _OB_incRef();
        return p;
    }

    static inline OBStubImpl_PIDemo_ptr
    _nil()
    {
        return 0;
    }

    //
    // IDL:PIDemo/noargs:1.0
    //
    virtual void noargs() = 0;

    //
    // IDL:PIDemo/noargs_oneway:1.0
    //
    virtual void noargs_oneway() = 0;

    //
    // IDL:PIDemo/noargs_return:1.0
    //
    virtual char* noargs_return() = 0;

    //
    // IDL:PIDemo/withargs:1.0
    //
    virtual void withargs(const char* param1,
                          char*& param2,
                          ::CORBA::String_out param3) = 0;

    //
    // IDL:PIDemo/systemexception:1.0
    //
    virtual void systemexception() = 0;

    //
    // IDL:PIDemo/userexception:1.0
    //
    virtual void userexception() = 0;

    //
    // IDL:PIDemo/switch_to_static_impl:1.0
    //
    virtual void switch_to_static_impl() = 0;

    //
    // IDL:PIDemo/switch_to_dynamic_impl:1.0
    //
    virtual void switch_to_dynamic_impl() = 0;

    //
    // IDL:PIDemo/call_other_impl:1.0
    //
    virtual void call_other_impl(::CORBA::Short level) = 0;

    //
    // IDL:PIDemo/deactivate:1.0
    //
    virtual void deactivate() = 0;
};

//
// IDL:PIDemo:1.0
//
class OBMarshalStubImpl_PIDemo : 
    virtual public OBStubImpl_PIDemo,
    virtual public OB::MarshalStubImpl
{
    OBMarshalStubImpl_PIDemo(const OBMarshalStubImpl_PIDemo&);
    void operator=(const OBMarshalStubImpl_PIDemo&);

protected:

    OBMarshalStubImpl_PIDemo() { }
    friend class OBProxy_PIDemo;

public:

    //
    // IDL:PIDemo/noargs:1.0
    //
    virtual void noargs();

    //
    // IDL:PIDemo/noargs_oneway:1.0
    //
    virtual void noargs_oneway();

    //
    // IDL:PIDemo/noargs_return:1.0
    //
    virtual char* noargs_return();

    //
    // IDL:PIDemo/withargs:1.0
    //
    virtual void withargs(const char* param1,
                          char*& param2,
                          ::CORBA::String_out param3);

    //
    // IDL:PIDemo/systemexception:1.0
    //
    virtual void systemexception();

    //
    // IDL:PIDemo/userexception:1.0
    //
    virtual void userexception();

    //
    // IDL:PIDemo/switch_to_static_impl:1.0
    //
    virtual void switch_to_static_impl();

    //
    // IDL:PIDemo/switch_to_dynamic_impl:1.0
    //
    virtual void switch_to_dynamic_impl();

    //
    // IDL:PIDemo/call_other_impl:1.0
    //
    virtual void call_other_impl(::CORBA::Short level);

    //
    // IDL:PIDemo/deactivate:1.0
    //
    virtual void deactivate();
};

//
// IDL:PIDemo:1.0
//
namespace CORBA
{

inline void
release(::PIDemo_ptr p)
{
    if(p)
        p -> _remove_ref();
}

inline Boolean
is_nil(::PIDemo_ptr p)
{
    return p == 0;
}

inline void
release(OBStubImpl_PIDemo_ptr p)
{
    if(p)
        p -> _OB_decRef();
}

inline Boolean
is_nil(OBStubImpl_PIDemo_ptr p)
{
    return p == 0;
}

} // End of namespace CORBA

void operator<<=(::CORBA::Any&, PIDemo_ptr*);
void operator<<=(::CORBA::Any&, PIDemo_ptr);
CORBA::Boolean operator>>=(const ::CORBA::Any&, PIDemo_ptr&);

inline void
operator<<=(::CORBA::Any_var& any, PIDemo_ptr* val)
{
    any.inout() <<= val;
}

inline void
operator<<=(::CORBA::Any_var& any, PIDemo_ptr val)
{
    any.inout() <<= val;
}

inline CORBA::Boolean
operator>>=(const ::CORBA::Any_var& any, PIDemo_ptr& val)
{
    return any.in() >>= val;
}

//
// IDL:PIDemo/User:1.0
//
void operator<<=(::CORBA::Any&, PIDemo::User*);
void operator<<=(::CORBA::Any&, const PIDemo::User&);
CORBA::Boolean operator>>=(const ::CORBA::Any&, const PIDemo::User*&);

inline void
operator<<=(::CORBA::Any_var& any, PIDemo::User* val)
{
    any.inout() <<= val;
}

inline void
operator<<=(::CORBA::Any_var& any, const PIDemo::User& val)
{
    any.inout() <<= val;
}

inline ::CORBA::Boolean
operator>>=(const ::CORBA::Any_var& any, const PIDemo::User*& val)
{
    return any.in() >>= val;
}

#endif
