// **********************************************************************
//
// Generated by the ORBacus IDL-to-C++ Translator
//
// Copyright (c) 2005
// IONA Technologies, Inc.
// Waltham, MA, USA
//
// All Rights Reserved
//
// **********************************************************************

// Version: 4.3.2

#include <OB/CORBAClient.h>
#include <PIDemo.h>

#ifndef OB_INTEGER_VERSION
#   error No ORBacus version defined! Is <OB/CORBA.h> included?
#endif

#ifndef OB_NO_VERSION_CHECK
#   if (OB_INTEGER_VERSION != 4030200L)
#       error ORBacus version mismatch!
#   endif
#endif

::OB::TypeCodeConst _tc_PIDemo(
"010000000e0000002300000001001e000f00000049444c3a504944656d6f3a312e30000007000"
"000504944656d6f00"
);

::OB::TypeCodeConst PIDemo::_tc_User(
"01eb2000160000002c000000013124001400000049444c3a504944656d6f2f557365723a312e3"
"00005000000557365720000000000000000"
);

//
// IDL:PIDemo:1.0
//
const char* PIDemo::ids_[] =
{
    "IDL:PIDemo:1.0",
    0
};

void
OBDuplicate(PIDemo_ptr p)
{
    if(p)
        p -> _add_ref();
}

void
OBRelease(PIDemo_ptr p)
{
    if(p)
        p -> _remove_ref();
}

PIDemo_ptr
PIDemo::_narrow(::CORBA::Object_ptr p)
{
    if(!::CORBA::is_nil(p))
    {
        PIDemo_ptr v = 
            dynamic_cast< PIDemo_ptr >(p);
        if(v)
            return _duplicate(v);

        if(p -> _is_a(ids_[0]))
        {
            OBProxy_PIDemo* val = new OBProxy_PIDemo;
            val -> _OB_copyFrom(p);
            return val;
        }
    }

    return _nil();
}

::CORBA::Object_ptr
OBUpcast(PIDemo_ptr p)
{
    return static_cast< ::CORBA::Object_ptr>(p);
}

PIDemo_ptr
PIDemo::_narrow(::CORBA::AbstractBase_ptr p)
{
    if(!::CORBA::is_nil(p))
    {
        PIDemo_ptr v =
            dynamic_cast< PIDemo_ptr >(p);
        if(v)
            return _duplicate(v);

        ::CORBA::Object_var obj = p -> _to_object();
        return _narrow(obj);
    }
    return _nil();
}

PIDemo_ptr
PIDemo::_unchecked_narrow(::CORBA::Object_ptr p)
{
    if(!::CORBA::is_nil(p))
    {
        PIDemo_ptr v =
            dynamic_cast< PIDemo_ptr >(p);
        if(v)
            return _duplicate(v);

        OBProxy_PIDemo* val = new OBProxy_PIDemo;
        val -> _OB_copyFrom(p);
        return val;
    }

    return _nil();
}

PIDemo_ptr
PIDemo::_unchecked_narrow(::CORBA::AbstractBase_ptr p)
{
    if(!::CORBA::is_nil(p))
    {
        ::CORBA::Object_var obj = p -> _to_object();
        return _unchecked_narrow(obj);
    }
    return _nil();
}

const char**
PIDemo::_OB_staticIds()
{
    return ids_;
}

void
OBMarshal(PIDemo_ptr _ob_v, OB::OutputStreamImpl* _ob_out)
{
    _ob_out -> write_Object(_ob_v);
}

void
OBUnmarshal(PIDemo_ptr& _ob_v, OB::InputStreamImpl* _ob_in)
{
    PIDemo_var old = _ob_v;
    ::CORBA::Object_var p = _ob_in -> read_Object();

    if(!::CORBA::is_nil(p))
    {
        OBProxy_PIDemo* _ob_obj = new OBProxy_PIDemo;
        _ob_obj -> _OB_copyFrom(p);
        _ob_v = _ob_obj;
    }
    else
        _ob_v = PIDemo::_nil();
}

void
operator<<=(::CORBA::Any& any, PIDemo_ptr* v)
{
    any.replace(_tc_PIDemo, (::CORBA::Object_ptr)*v, true);
}

void
operator<<=(::CORBA::Any& any, PIDemo_ptr v)
{
    PIDemo_ptr val = PIDemo::_duplicate(v);
    any <<= &val;
}

::CORBA::Boolean
operator>>=(const ::CORBA::Any& any, PIDemo_ptr& v)
{
    if(any.check_type(_tc_PIDemo))
    {
        ::CORBA::Object_ptr val = (::CORBA::Object_ptr)any.value();

        if(!::CORBA::is_nil(val))
        {
            if(!(v = dynamic_cast< PIDemo_ptr >(val)))
            {
                OBProxy_PIDemo* obj = new OBProxy_PIDemo;
                obj -> _OB_copyFrom(val);
                v = obj;
                (::CORBA::Any&)any <<= &v;
            }
        }
        else
            v = PIDemo::_nil();

        return true;
    }
    else
        return false;
}

//
// IDL:PIDemo/User:1.0
//
PIDemo::User::User(const User& _ob_a)
    : ::CORBA::UserException(_ob_a)
{
}

PIDemo::User&
PIDemo::User::operator=(const User&)
{
    return *this;
}

PIDemo::User*
PIDemo::User::_downcast(::CORBA::Exception* p)
{
    return dynamic_cast< User* >(p);
}

const PIDemo::User*
PIDemo::User::_downcast(const ::CORBA::Exception* p)
{
    return dynamic_cast< const User* >(p);
}

const char*
PIDemo::User::_name() const
{
    return "User";
}

const char*
PIDemo::User::_rep_id() const
{
    return "IDL:PIDemo/User:1.0";
}

char*
PIDemo::User::_to_string() const
{
    return _OB_defaultToString("PIDemo::User");
}

::CORBA::Exception*
PIDemo::User::_OB_clone() const
{
    return new User(*this);
}

void
PIDemo::User::_OB_insertInAny(::CORBA::Any& any)
{
    any <<= this;
}

void
PIDemo::User::_OB_unmarshal(User&, OB::InputStreamImpl* _ob_in)
{
    ::CORBA::String_var id = _ob_in -> read_string();
    assert(strcmp(id, "IDL:PIDemo/User:1.0") == 0);
}

void
operator<<=(::CORBA::Any& any, PIDemo::User* v)
{
    static const OB::Info< PIDemo::User > info;
    any.replace(PIDemo::_tc_User, v, true, &info);
}

void
operator<<=(::CORBA::Any& any, const PIDemo::User& v)
{
    any <<= new PIDemo::User(v);
}

::CORBA::Boolean
operator>>=(const ::CORBA::Any& any, const PIDemo::User*& v)
{
    if(any.check_type(PIDemo::_tc_User))
    {
        if(!any.info())
        {
            OB::InputStream_var _ob_in = any.create_input_stream();
            PIDemo::User* val = new PIDemo::User;
            PIDemo::User::_OB_unmarshal(*val, _ob_in);
            (::CORBA::Any&)any <<= val;
        }

        v = (PIDemo::User*)any.value();
        return true;
    }
    else
        return false;
}

//
// IDL:PIDemo:1.0
//
OB::MarshalStubImpl_ptr
OBProxy_PIDemo::_OB_createMarshalStubImpl()
{
    return new OBMarshalStubImpl_PIDemo;
}

const char**
OBProxy_PIDemo::_OB_ids() const
{
    return ::PIDemo::ids_;
}

//
// IDL:PIDemo/noargs:1.0
//
void
OBProxy_PIDemo::noargs()
{
    ::CORBA::ULong _ob_retry = 0, _ob_hop = 0;
    while(true)
    {
        try
        {
            OB::StubImplBase_var _ob_stubImplBase = _OB_getStubImpl();
            OBStubImpl_PIDemo_ptr _ob_stubImpl = 
                dynamic_cast< OBStubImpl_PIDemo_ptr>(_ob_stubImplBase.in());
            _ob_stubImpl -> noargs();
            return;
        }
        catch(const OB::ExceptionBase& _ob_ex)
        {
            _OB_handleException(_ob_ex, _ob_retry, _ob_hop);
        }
    }
}

//
// IDL:PIDemo/noargs_oneway:1.0
//
void
OBProxy_PIDemo::noargs_oneway()
{
    ::CORBA::ULong _ob_retry = 0, _ob_hop = 0;
    while(true)
    {
        try
        {
            OB::StubImplBase_var _ob_stubImplBase = _OB_getStubImpl();
            OBStubImpl_PIDemo_ptr _ob_stubImpl = 
                dynamic_cast< OBStubImpl_PIDemo_ptr>(_ob_stubImplBase.in());
            _ob_stubImpl -> noargs_oneway();
            return;
        }
        catch(const OB::ExceptionBase& _ob_ex)
        {
            _OB_handleException(_ob_ex, _ob_retry, _ob_hop);
        }
    }
}

//
// IDL:PIDemo/noargs_return:1.0
//
char*
OBProxy_PIDemo::noargs_return()
{
    ::CORBA::ULong _ob_retry = 0, _ob_hop = 0;
    while(true)
    {
        try
        {
            OB::StubImplBase_var _ob_stubImplBase = _OB_getStubImpl();
            OBStubImpl_PIDemo_ptr _ob_stubImpl = 
                dynamic_cast< OBStubImpl_PIDemo_ptr>(_ob_stubImplBase.in());
            return _ob_stubImpl -> noargs_return();
        }
        catch(const OB::ExceptionBase& _ob_ex)
        {
            _OB_handleException(_ob_ex, _ob_retry, _ob_hop);
        }
    }
}

//
// IDL:PIDemo/withargs:1.0
//
void
OBProxy_PIDemo::withargs(const char* _ob_a0,
                         char*& _ob_a1,
                         ::CORBA::String_out _ob_a2)
{
    ::CORBA::ULong _ob_retry = 0, _ob_hop = 0;
    while(true)
    {
        try
        {
            OB::StubImplBase_var _ob_stubImplBase = _OB_getStubImpl();
            OBStubImpl_PIDemo_ptr _ob_stubImpl = 
                dynamic_cast< OBStubImpl_PIDemo_ptr>(_ob_stubImplBase.in());
            _ob_stubImpl -> withargs(_ob_a0, _ob_a1, _ob_a2);
            return;
        }
        catch(const OB::ExceptionBase& _ob_ex)
        {
            _OB_handleException(_ob_ex, _ob_retry, _ob_hop);
        }
    }
}

//
// IDL:PIDemo/systemexception:1.0
//
void
OBProxy_PIDemo::systemexception()
{
    ::CORBA::ULong _ob_retry = 0, _ob_hop = 0;
    while(true)
    {
        try
        {
            OB::StubImplBase_var _ob_stubImplBase = _OB_getStubImpl();
            OBStubImpl_PIDemo_ptr _ob_stubImpl = 
                dynamic_cast< OBStubImpl_PIDemo_ptr>(_ob_stubImplBase.in());
            _ob_stubImpl -> systemexception();
            return;
        }
        catch(const OB::ExceptionBase& _ob_ex)
        {
            _OB_handleException(_ob_ex, _ob_retry, _ob_hop);
        }
    }
}

//
// IDL:PIDemo/userexception:1.0
//
void
OBProxy_PIDemo::userexception()
{
    ::CORBA::ULong _ob_retry = 0, _ob_hop = 0;
    while(true)
    {
        try
        {
            OB::StubImplBase_var _ob_stubImplBase = _OB_getStubImpl();
            OBStubImpl_PIDemo_ptr _ob_stubImpl = 
                dynamic_cast< OBStubImpl_PIDemo_ptr>(_ob_stubImplBase.in());
            _ob_stubImpl -> userexception();
            return;
        }
        catch(const OB::ExceptionBase& _ob_ex)
        {
            _OB_handleException(_ob_ex, _ob_retry, _ob_hop);
        }
    }
}

//
// IDL:PIDemo/switch_to_static_impl:1.0
//
void
OBProxy_PIDemo::switch_to_static_impl()
{
    ::CORBA::ULong _ob_retry = 0, _ob_hop = 0;
    while(true)
    {
        try
        {
            OB::StubImplBase_var _ob_stubImplBase = _OB_getStubImpl();
            OBStubImpl_PIDemo_ptr _ob_stubImpl = 
                dynamic_cast< OBStubImpl_PIDemo_ptr>(_ob_stubImplBase.in());
            _ob_stubImpl -> switch_to_static_impl();
            return;
        }
        catch(const OB::ExceptionBase& _ob_ex)
        {
            _OB_handleException(_ob_ex, _ob_retry, _ob_hop);
        }
    }
}

//
// IDL:PIDemo/switch_to_dynamic_impl:1.0
//
void
OBProxy_PIDemo::switch_to_dynamic_impl()
{
    ::CORBA::ULong _ob_retry = 0, _ob_hop = 0;
    while(true)
    {
        try
        {
            OB::StubImplBase_var _ob_stubImplBase = _OB_getStubImpl();
            OBStubImpl_PIDemo_ptr _ob_stubImpl = 
                dynamic_cast< OBStubImpl_PIDemo_ptr>(_ob_stubImplBase.in());
            _ob_stubImpl -> switch_to_dynamic_impl();
            return;
        }
        catch(const OB::ExceptionBase& _ob_ex)
        {
            _OB_handleException(_ob_ex, _ob_retry, _ob_hop);
        }
    }
}

//
// IDL:PIDemo/call_other_impl:1.0
//
void
OBProxy_PIDemo::call_other_impl(::CORBA::Short _ob_a0)
{
    ::CORBA::ULong _ob_retry = 0, _ob_hop = 0;
    while(true)
    {
        try
        {
            OB::StubImplBase_var _ob_stubImplBase = _OB_getStubImpl();
            OBStubImpl_PIDemo_ptr _ob_stubImpl = 
                dynamic_cast< OBStubImpl_PIDemo_ptr>(_ob_stubImplBase.in());
            _ob_stubImpl -> call_other_impl(_ob_a0);
            return;
        }
        catch(const OB::ExceptionBase& _ob_ex)
        {
            _OB_handleException(_ob_ex, _ob_retry, _ob_hop);
        }
    }
}

//
// IDL:PIDemo/deactivate:1.0
//
void
OBProxy_PIDemo::deactivate()
{
    ::CORBA::ULong _ob_retry = 0, _ob_hop = 0;
    while(true)
    {
        try
        {
            OB::StubImplBase_var _ob_stubImplBase = _OB_getStubImpl();
            OBStubImpl_PIDemo_ptr _ob_stubImpl = 
                dynamic_cast< OBStubImpl_PIDemo_ptr>(_ob_stubImplBase.in());
            _ob_stubImpl -> deactivate();
            return;
        }
        catch(const OB::ExceptionBase& _ob_ex)
        {
            _OB_handleException(_ob_ex, _ob_retry, _ob_hop);
        }
    }
}

//
// IDL:PIDemo:1.0
//
void
OBDuplicate(OBStubImpl_PIDemo_ptr p)
{
    if(p)
        p -> _OB_incRef();
}

void
OBRelease(OBStubImpl_PIDemo_ptr p)
{
    if(p)
        p -> _OB_decRef();
}

//
// IDL:PIDemo/noargs:1.0
//
void
OBMarshalStubImpl_PIDemo::noargs()
{
    while(true)
    {
        OB::Downcall_var _ob_down = _OB_createPIArgsDowncall("noargs", true, 0, 0, 0, 0, 0);
        try
        {
            _OB_preMarshal(_ob_down);
            _OB_postMarshal(_ob_down);
            _OB_request(_ob_down);
            _OB_preUnmarshal(_ob_down);
            _OB_postUnmarshal(_ob_down);
            return;
        }
        catch(const OB::FailureException& _ob_ex)
        {
            _OB_handleFailureException(_ob_down, _ob_ex);
        }
    }
}

//
// IDL:PIDemo/noargs_oneway:1.0
//
void
OBMarshalStubImpl_PIDemo::noargs_oneway()
{
    while(true)
    {
        OB::Downcall_var _ob_down = _OB_createPIArgsDowncall("noargs_oneway", false, 0, 0, 0, 0, 0);
        try
        {
            _OB_preMarshal(_ob_down);
            _OB_postMarshal(_ob_down);
            _OB_oneway(_ob_down);
            _OB_preUnmarshal(_ob_down);
            _OB_postUnmarshal(_ob_down);
            return;
        }
        catch(const OB::FailureException& _ob_ex)
        {
            _OB_handleFailureException(_ob_down, _ob_ex);
        }
    }
}

//
// IDL:PIDemo/noargs_return:1.0
//
char*
OBMarshalStubImpl_PIDemo::noargs_return()
{
    OB::ParameterDesc _ob_retDesc =
    {
        0, ::CORBA::_tc_string, 0, 0 /*in*/
    };

    while(true)
    {
        OB::Downcall_var _ob_down = _OB_createPIArgsDowncall("noargs_return", true, 0, 0, &_ob_retDesc, 0, 0);
        try
        {
            _OB_preMarshal(_ob_down);
            _OB_postMarshal(_ob_down);
            _OB_request(_ob_down);
            bool _ob_uex;
            OB::InputStreamImpl* _ob_in = _OB_preUnmarshal(_ob_down, _ob_uex);
            if(_ob_uex)
            {
                _OB_postUnmarshal(_ob_down);
            }
            else
            {
                ::CORBA::String_var _ob_r;
                try
                {
                    _ob_r = _ob_in -> read_string();
                    _ob_retDesc.param = _ob_r.inout();
                }
                catch(const ::CORBA::SystemException& _ob_ex)
                {
                    _OB_unmarshalEx(_ob_down, _ob_ex);
                }
                _OB_postUnmarshal(_ob_down);
                return _ob_r._retn();
            }
        }
        catch(const OB::FailureException& _ob_ex)
        {
            _OB_handleFailureException(_ob_down, _ob_ex);
        }
    }
}

//
// IDL:PIDemo/withargs:1.0
//
void
OBMarshalStubImpl_PIDemo::withargs(const char* _ob_a0,
                                   char*& _ob_a1,
                                   ::CORBA::String_out _ob_a2)
{
    OB::ParameterDesc _ob_desc[] =
    {
        {
            (void*)_ob_a0, ::CORBA::_tc_string, 0, 0 /*in*/
        },
        {
            (void*)_ob_a1, ::CORBA::_tc_string, 0, 2 /*inout*/
        },
        {
            0, ::CORBA::_tc_string, 0, 1 /*out*/
        }
    };

    while(true)
    {
        OB::Downcall_var _ob_down = _OB_createPIArgsDowncall("withargs", true, _ob_desc, 3, 0, 0, 0);
        try
        {
            OB::OutputStreamImpl* _ob_out = _OB_preMarshal(_ob_down);
            try
            {
                _ob_out -> write_string(_ob_a0);
                _ob_out -> write_string(_ob_a1);
            }
            catch(const ::CORBA::SystemException& _ob_ex)
            {
                _OB_marshalEx(_ob_down, _ob_ex);
            }
            _OB_postMarshal(_ob_down);
            _OB_request(_ob_down);
            bool _ob_uex;
            OB::InputStreamImpl* _ob_in = _OB_preUnmarshal(_ob_down, _ob_uex);
            if(_ob_uex)
            {
                _OB_postUnmarshal(_ob_down);
            }
            else
            {
                try
                {
                    ::CORBA::string_free(_ob_a1);
                    _ob_a1 = 0;
                    _ob_a1 = _ob_in -> read_string();
                    _ob_desc[1].param = (void*)_ob_a1;
                    _ob_a2 = _ob_in -> read_string();
                    _ob_desc[2].param = (void*)_ob_a2.ptr();
                }
                catch(const ::CORBA::SystemException& _ob_ex)
                {
                    _OB_unmarshalEx(_ob_down, _ob_ex);
                }
                _OB_postUnmarshal(_ob_down);
                return;
            }
        }
        catch(const OB::FailureException& _ob_ex)
        {
            _OB_handleFailureException(_ob_down, _ob_ex);
        }
    }
}

//
// IDL:PIDemo/systemexception:1.0
//
void
OBMarshalStubImpl_PIDemo::systemexception()
{
    while(true)
    {
        OB::Downcall_var _ob_down = _OB_createPIArgsDowncall("systemexception", true, 0, 0, 0, 0, 0);
        try
        {
            _OB_preMarshal(_ob_down);
            _OB_postMarshal(_ob_down);
            _OB_request(_ob_down);
            _OB_preUnmarshal(_ob_down);
            _OB_postUnmarshal(_ob_down);
            return;
        }
        catch(const OB::FailureException& _ob_ex)
        {
            _OB_handleFailureException(_ob_down, _ob_ex);
        }
    }
}

//
// IDL:PIDemo/userexception:1.0
//
void
OBMarshalStubImpl_PIDemo::userexception()
{
    ::CORBA::TypeCode_ptr _ob_exceptions[] =
    {
        PIDemo::_tc_User
    };

    while(true)
    {
        OB::Downcall_var _ob_down = _OB_createPIArgsDowncall("userexception", true, 0, 0, 0, _ob_exceptions, 1);
        try
        {
            _OB_preMarshal(_ob_down);
            _OB_postMarshal(_ob_down);
            _OB_request(_ob_down);
            bool _ob_uex;
            OB::InputStreamImpl* _ob_in = _OB_preUnmarshal(_ob_down, _ob_uex);
            if(_ob_uex)
            {
                try
                {
                    ::CORBA::String_var _ob_id = _OB_unmarshalExceptionId(_ob_down);
                    if(strcmp(_ob_id, "IDL:PIDemo/User:1.0") == 0)
                    {
                        ::PIDemo::User _ob_except;
                        ::PIDemo::User::_OB_unmarshal(_ob_except, _ob_in);
                        _OB_setUserException(_ob_down, _ob_except);
                    }
                }
                catch(const ::CORBA::SystemException& _ob_ex)
                {
                    _OB_unmarshalEx(_ob_down, _ob_ex);
                }
                _OB_postUnmarshal(_ob_down);
            }
            else
            {
                _OB_postUnmarshal(_ob_down);
                return;
            }
        }
        catch(const OB::FailureException& _ob_ex)
        {
            _OB_handleFailureException(_ob_down, _ob_ex);
        }
    }
}

//
// IDL:PIDemo/switch_to_static_impl:1.0
//
void
OBMarshalStubImpl_PIDemo::switch_to_static_impl()
{
    while(true)
    {
        OB::Downcall_var _ob_down = _OB_createPIArgsDowncall("switch_to_static_impl", true, 0, 0, 0, 0, 0);
        try
        {
            _OB_preMarshal(_ob_down);
            _OB_postMarshal(_ob_down);
            _OB_request(_ob_down);
            _OB_preUnmarshal(_ob_down);
            _OB_postUnmarshal(_ob_down);
            return;
        }
        catch(const OB::FailureException& _ob_ex)
        {
            _OB_handleFailureException(_ob_down, _ob_ex);
        }
    }
}

//
// IDL:PIDemo/switch_to_dynamic_impl:1.0
//
void
OBMarshalStubImpl_PIDemo::switch_to_dynamic_impl()
{
    while(true)
    {
        OB::Downcall_var _ob_down = _OB_createPIArgsDowncall("switch_to_dynamic_impl", true, 0, 0, 0, 0, 0);
        try
        {
            _OB_preMarshal(_ob_down);
            _OB_postMarshal(_ob_down);
            _OB_request(_ob_down);
            _OB_preUnmarshal(_ob_down);
            _OB_postUnmarshal(_ob_down);
            return;
        }
        catch(const OB::FailureException& _ob_ex)
        {
            _OB_handleFailureException(_ob_down, _ob_ex);
        }
    }
}

//
// IDL:PIDemo/call_other_impl:1.0
//
void
OBMarshalStubImpl_PIDemo::call_other_impl(::CORBA::Short _ob_a0)
{
    OB::ParameterDesc _ob_desc[] =
    {
        {
            &_ob_a0, ::CORBA::_tc_short, 0, 0 /*in*/
        }
    };

    while(true)
    {
        OB::Downcall_var _ob_down = _OB_createPIArgsDowncall("call_other_impl", true, _ob_desc, 1, 0, 0, 0);
        try
        {
            OB::OutputStreamImpl* _ob_out = _OB_preMarshal(_ob_down);
            try
            {
                _ob_out -> write_short(_ob_a0);
            }
            catch(const ::CORBA::SystemException& _ob_ex)
            {
                _OB_marshalEx(_ob_down, _ob_ex);
            }
            _OB_postMarshal(_ob_down);
            _OB_request(_ob_down);
            _OB_preUnmarshal(_ob_down);
            _OB_postUnmarshal(_ob_down);
            return;
        }
        catch(const OB::FailureException& _ob_ex)
        {
            _OB_handleFailureException(_ob_down, _ob_ex);
        }
    }
}

//
// IDL:PIDemo/deactivate:1.0
//
void
OBMarshalStubImpl_PIDemo::deactivate()
{
    while(true)
    {
        OB::Downcall_var _ob_down = _OB_createPIArgsDowncall("deactivate", true, 0, 0, 0, 0, 0);
        try
        {
            _OB_preMarshal(_ob_down);
            _OB_postMarshal(_ob_down);
            _OB_request(_ob_down);
            _OB_preUnmarshal(_ob_down);
            _OB_postUnmarshal(_ob_down);
            return;
        }
        catch(const OB::FailureException& _ob_ex)
        {
            _OB_handleFailureException(_ob_down, _ob_ex);
        }
    }
}
